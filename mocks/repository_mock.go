// Code generated by MockGen. DO NOT EDIT.
// Source: bookingservice.go
//
// Generated by this command:
//
//	mockgen -source=bookingservice.go -destination=mocks/repository_mock.go -package=mocks RepositoryManager
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/burubur/pingpox-api/types"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryManager is a mock of RepositoryManager interface.
type MockRepositoryManager struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryManagerMockRecorder
}

// MockRepositoryManagerMockRecorder is the mock recorder for MockRepositoryManager.
type MockRepositoryManagerMockRecorder struct {
	mock *MockRepositoryManager
}

// NewMockRepositoryManager creates a new mock instance.
func NewMockRepositoryManager(ctrl *gomock.Controller) *MockRepositoryManager {
	mock := &MockRepositoryManager{ctrl: ctrl}
	mock.recorder = &MockRepositoryManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryManager) EXPECT() *MockRepositoryManagerMockRecorder {
	return m.recorder
}

// FetchBookingData mocks base method.
func (m *MockRepositoryManager) FetchBookingData(arg0 context.Context, arg1 uuid.UUID) (types.Bookings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchBookingData", arg0, arg1)
	ret0, _ := ret[0].(types.Bookings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchBookingData indicates an expected call of FetchBookingData.
func (mr *MockRepositoryManagerMockRecorder) FetchBookingData(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchBookingData", reflect.TypeOf((*MockRepositoryManager)(nil).FetchBookingData), arg0, arg1)
}

// StoreBookingCreationData mocks base method.
func (m *MockRepositoryManager) StoreBookingCreationData(arg0 context.Context, arg1 types.Bookings) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreBookingCreationData", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreBookingCreationData indicates an expected call of StoreBookingCreationData.
func (mr *MockRepositoryManagerMockRecorder) StoreBookingCreationData(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreBookingCreationData", reflect.TypeOf((*MockRepositoryManager)(nil).StoreBookingCreationData), arg0, arg1)
}

// UpdateBookingStatus mocks base method.
func (m *MockRepositoryManager) UpdateBookingStatus(arg0 context.Context, arg1 types.TypeStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBookingStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBookingStatus indicates an expected call of UpdateBookingStatus.
func (mr *MockRepositoryManagerMockRecorder) UpdateBookingStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBookingStatus", reflect.TypeOf((*MockRepositoryManager)(nil).UpdateBookingStatus), arg0, arg1)
}

// MockEventManager is a mock of EventManager interface.
type MockEventManager struct {
	ctrl     *gomock.Controller
	recorder *MockEventManagerMockRecorder
}

// MockEventManagerMockRecorder is the mock recorder for MockEventManager.
type MockEventManagerMockRecorder struct {
	mock *MockEventManager
}

// NewMockEventManager creates a new mock instance.
func NewMockEventManager(ctrl *gomock.Controller) *MockEventManager {
	mock := &MockEventManager{ctrl: ctrl}
	mock.recorder = &MockEventManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventManager) EXPECT() *MockEventManagerMockRecorder {
	return m.recorder
}

// PublishBookingAcceptanceEvent mocks base method.
func (m *MockEventManager) PublishBookingAcceptanceEvent(arg0 context.Context, arg1 types.Bookings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishBookingAcceptanceEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishBookingAcceptanceEvent indicates an expected call of PublishBookingAcceptanceEvent.
func (mr *MockEventManagerMockRecorder) PublishBookingAcceptanceEvent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishBookingAcceptanceEvent", reflect.TypeOf((*MockEventManager)(nil).PublishBookingAcceptanceEvent), arg0, arg1)
}

// PublishBookingCreationEvent mocks base method.
func (m *MockEventManager) PublishBookingCreationEvent(arg0 context.Context, arg1 types.Bookings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishBookingCreationEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishBookingCreationEvent indicates an expected call of PublishBookingCreationEvent.
func (mr *MockEventManagerMockRecorder) PublishBookingCreationEvent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishBookingCreationEvent", reflect.TypeOf((*MockEventManager)(nil).PublishBookingCreationEvent), arg0, arg1)
}
